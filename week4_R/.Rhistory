print("This is a code block!")
getwd()
var_string <- "hello world!"
var_num <- 23
var_vector <- c(3, 2, 1)
## Create a new variable my_var to store anything you choose:
my_var <- "My name is Aditi!"
print(my_var)
# Undefined Values
## create an undefined value in two different ways
null <- NULL
na <- NA
# Boolean Value is either true or false
## booleans can be defined in a variety of ways in R!
true_var <- TRUE
false_var <- FALSE
## numeric is a catch all for any number value in R
negative <- -20
decimal <- 2.70
## a string is any text value
## strings can be enclosed in single or double quote
string_var <- "Hello"
char_var <- "a"
## vectors contain data elements of the same data type
## they are declared by enclosing elements in c()
vector <- c(1, 2, 3, 4)
## a factor is a categorical variable
## a factor has data elements (defined like a vector) and categories (known also as levels), that are inferred from the data
factor <- factor(vector)
factor
## add code here!
name_var <- "Aditi"
print(name_var)
age_var <- 20
print(age_var)
birthday_var <- "04/20/2004"
print(birthday_var)
three_fav_colors <- c("blue","darkgreen", "violet" )
print(three_fav_colors)
## add code here!
name_var <- "Aditi" # string
print(name_var)
age_var <- 20 # integer
print(age_var)
birthday_var <- "04/20/2004" # string
print(birthday_var)
three_fav_colors <- c("blue","darkgreen", "violet") # vector
print(three_fav_colors)
sum(3, 4, 5) ## calling the function without saving the output automatically prints to the console
max_value <- max(1, 10, 100) ## storing to a variable does not automatically print
max_value
list_of_numbers <- c(1, 1, 2, 3, 5, 8, 13, 21)
## call functions here
sum(list_of_numbers)
min(list_of_numbers)
mean(list_of_numbers)
mode(list_of_numbers)
summary(list_of_numbers)
"QBIO" == "QBIO" ## is equal to
"USC" != "UCLA" ## is not equal to
10 > 9 ## greater than
1 < 2 ## less than
8 >= 3 ## greater than or equal to
4 <= 7 ## less than or equal to
100 %in% c(10, 100, 1000, 10000) ## is present in a vector/list
"cat" == "cat" & "dog" == "dog" # prediction: TRUE
"cat" == "cat" & "fish" == "hamster" # prediction: FALSE
1 < 2 | 3 < 1 # prediction: TRUE
1 < 2 | 3 < 5 # prediction: TRUE
"blue" %in% c("yellow", "red", "blue") &! "happy" %in% c("sad", "angry")
# prediction: TRUE
value = 20
if (value <= 0) {
print("fail")
} else if (value > 0) {
print("success")
} else {
print("fail")
}
new_list <- c("starbucks", "elephant", 232, "magenta", -10)
if (7.5 %in% new_list) {
print("A")
if (!7.5 %in% new_list) {
print ("B")
}
} else if  (!(232 %in% new_list)) {
print("C")
} else if ("starbucks" %in% new_list &! 9 > 10) {
print("D")
if (100 < 1 | "elephant" %in% new_list) {
print("E")
}
else if ("magenta" %in% new_list) {
print("F")
}
} else {
print("G")
}
# Prediction: DE
i = 1
while (i < 10) {
print(i)
i = i + 2
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(my_list)
x = x + 1
# do something
# update condition
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(my_list)
x = x + 1
# do something
# update condition
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(my_list)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
mean <- mean(my_list)
print(mean)
x = x + 1
}
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
}
print(mean)
x = 0
my_list <- c(1, 10, x)
mean <- mean(my_list)
while (mean <= 10) {
x = x + 1
my_list <- c(1, 10, x)
mean <- mean(my_list)
print(mean)
}
list <- c(2, 4, 6, 8)
for (element in list) { # note that I can call "element" whatever I want, it like a temporary variable that stores the list's item
print (element * 2)
}
list <- c(1, 5, 20, 0)
# write loop here
for (element in list){
print(element^3)
}
# write loop here
for (i in -7:7){
print(i)
}
list <- c(1, 10, 100)
# using a loop
sum_loop <- 0
for (i in list) {
sum_loop = sum_loop + i
}
# using a function
sum_func <- sum(list)
# they are the same!
sum_loop
sum_func
sum_loop == sum_func
vector <- 1:10^6 # here's a huge vector (all numbers between 1 and 10^6)
loop_sum <- function(vector) { # here, I created a user-defined function that sums up the elements in "vector" using a loop
x=0
for (i in vector) {
x = x + i
}
return(x)
}
function_sum <- sum(vector) # here, we sum up the elements in "vector" using a built-in vectorized function
loop_sum(vector) == function_sum # tests that these are equal
install.packages("rbenchmark")
library(rbenchmark) # this library allows us to use the benchmark function to explore run time
print(benchmark(
vectorized = function_sum, #this compares the vectorized sum (function_sum)...
loop = loop_sum(vector), # to the loop sum (loop_sum)
replications = 100
))
if (!require(package)){ # you only need to install a package once, this checks to see if it has already been installed
install.packages("package")
}
library(package) # you need to load in a package in every file that uses it (it's good practice to run all package related lines at the top of your file)
# write code here
help(is.na())
# write code here
help(is.na
# write code here
help(is.na)
swirl()
